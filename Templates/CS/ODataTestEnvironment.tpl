<CODEGEN_FILENAME>TestEnvironment.cs</CODEGEN_FILENAME>
<REQUIRES_CODEGEN_VERSION>5.4.6</REQUIRES_CODEGEN_VERSION>
<REQUIRES_USERTOKEN>DATA_FOLDER</REQUIRES_USERTOKEN>
<REQUIRES_USERTOKEN>MODELS_NAMESPACE</REQUIRES_USERTOKEN>
;//****************************************************************************
;//
;// Title:       ODataTestEnvironment.tpl
;//
;// Type:        CodeGen Template
;//
;// Description: Generates utilities for configuting a hosting environment.
;//
;// Copyright (c) 2018, Synergex International, Inc. All rights reserved.
;//
;// Redistribution and use in source and binary forms, with or without
;// modification, are permitted provided that the following conditions are met:
;//
;// * Redistributions of source code must retain the above copyright notice,
;//   this list of conditions and the following disclaimer.
;//
;// * Redistributions in binary form must reproduce the above copyright notice,
;//   this list of conditions and the following disclaimer in the documentation
;//   and/or other materials provided with the distribution.
;//
;// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
;// AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
;// IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
;// ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
;// LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
;// CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
;// SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
;// INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
;// CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
;// ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
;// POSSIBILITY OF SUCH DAMAGE.
;//
//*****************************************************************************
//
// Title:       TestEnvironment.cs
//
// Description: Utilities for configuting a hosting environment.
//
//*****************************************************************************
// WARNING: GENERATED CODE!
// This file was generated by CodeGen. Avoid editing the file if possible.
// Any changes you make will be lost of the file is re-generated.
//*****************************************************************************

using System.Collections.Generic;
using System.IO;
using System.Text;
using Synergex.SynergyDE;
using <MODELS_NAMESPACE>;
<IF DEFINED_ENABLE_CREATE_TEST_FILES>
using <NAMESPACE>.DataGenerators;
</IF DEFINED_ENABLE_CREATE_TEST_FILES>

namespace <NAMESPACE>
{
    public static class TestEnvironment
    {
        public static void Configure()
        {
            Encoding.RegisterProvider(CodePagesEncodingProvider.Instance);
            setLogicals();
<IF DEFINED_ENABLE_CREATE_TEST_FILES>
            deleteFiles();
            createFiles();
</IF DEFINED_ENABLE_CREATE_TEST_FILES>
        }

        public static void Cleanup()
        {
<IF DEFINED_ENABLE_CREATE_TEST_FILES>
            deleteFiles();
</IF DEFINED_ENABLE_CREATE_TEST_FILES>
        }

        private static void setLogicals()
        {
            var sampleDataFolder = findRelativeFolderForAssembly("SampleData");
            var logicals = new List<string>();
            var fileSpec = string.Empty;
            <STRUCTURE_LOOP>
    
            fileSpec = "<FILE_NAME>";
            if (fileSpec.Contains(":"))
            {
                var logical = fileSpec.Split(":")[0].ToUpper();
                if (!logicals.Contains(logical))
                {
                    logicals.Add(logical);
                }
            }
            </STRUCTURE_LOOP>
            
            foreach (var logical in logicals)
            {
                Dbl.Utils.SetLog(logical, sampleDataFolder);
            }
        }

<IF DEFINED_ENABLE_CREATE_TEST_FILES>
        private static void createFiles()
        {
            var chout = 0;
            string dataFile;
            string xdlFile;

<STRUCTURE_LOOP>
  <IF STRUCTURE_ISAM>
            var <structurePlural> = <StructureNoplural>Loader.LoadFromFile();
  </IF STRUCTURE_ISAM>
</STRUCTURE_LOOP>

<STRUCTURE_LOOP>
            //Create and load the <structurePlural> file

            dataFile = "<FILE_NAME>";
<IF STRUCTURE_ISAM>
            xdlFile = "@" + dataFile.ToLower().Replace(".ism",".xdl");
            Dbl.Utils.OpenOutputIndexed(ref chout, dataFile, xdlFile);            
            foreach (var <structureNoplural> in <structurePlural>)
                Dbl.Utils.Store(chout, <structureNoplural>.SynergyRecord);
            Dbl.Utils.Close(chout);

</IF STRUCTURE_ISAM>
<IF STRUCTURE_RELATIVE>
            var sourceFile = dataFile.ToLower().Replace(".ddf",".txt");
            File.Copy(sourceFile, dataFile);

</IF STRUCTURE_RELATIVE>
            </STRUCTURE_LOOP>
        }

        private static void deleteFiles()
        {
            <STRUCTURE_LOOP>
            //Delete the <structurePlural> file
            try
            {
                Dbl.Utils.Delete("<FILE_NAME>");
            }
            catch (NoFileFoundException e)
            {
            }

            </STRUCTURE_LOOP>
        }

</IF DEFINED_ENABLE_CREATE_TEST_FILES>
        private static string findRelativeFolderForAssembly(string folderName)
        {
            var assemblyLocation = typeof(TestEnvironment).Assembly.Location;
            var currentFolder = Path.GetDirectoryName(assemblyLocation);
            var rootPath = Path.GetPathRoot(currentFolder);
            while (currentFolder != null && currentFolder != rootPath)
            {
                if (Directory.Exists(Path.Combine(currentFolder, folderName)))
                    return Path.Combine(currentFolder, folderName);
                
                currentFolder = Path.GetFullPath(currentFolder + "..\\");
            }
            
            return null;
        }
    }
}
