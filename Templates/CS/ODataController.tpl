<CODEGEN_FILENAME><StructurePlural>Controller.cs</CODEGEN_FILENAME>
<REQUIRES_CODEGEN_VERSION>5.5.2</REQUIRES_CODEGEN_VERSION>
<REQUIRES_USERTOKEN>MODELS_NAMESPACE</REQUIRES_USERTOKEN>
<REQUIRES_USERTOKEN>SERVICES_NAMESPACE</REQUIRES_USERTOKEN>
<REQUIRES_USERTOKEN>API_ENABLE_QUERY_PARAMS</REQUIRES_USERTOKEN>
;//****************************************************************************
;//
;// Title:       ODataController.tpl
;//
;// Type:        CodeGen Template
;//
;// Description: Used to create OData Controllers in a Harmony Core environment
;//
;// Copyright (c) 2018, Synergex International, Inc. All rights reserved.
;//
;// Redistribution and use in source and binary forms, with or without
;// modification, are permitted provided that the following conditions are met:
;//
;// * Redistributions of source code must retain the above copyright notice,
;//   this list of conditions and the following disclaimer.
;//
;// * Redistributions in binary form must reproduce the above copyright notice,
;//   this list of conditions and the following disclaimer in the documentation
;//   and/or other materials provided with the distribution.
;//
;// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
;// AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
;// IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
;// ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
;// LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
;// CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
;// SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
;// INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
;// CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
;// ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
;// POSSIBILITY OF SUCH DAMAGE.
;//
//*****************************************************************************
//
// Title:       <StructurePlural>Controller.cs
//
// Description: OData controller for the <STRUCTURE_NOALIAS> structure.
//
//*****************************************************************************
// WARNING: GENERATED CODE!
// This file was generated by CodeGen. Avoid editing the file if possible.
// Any changes you make will be lost of the file is re-generated.
//*****************************************************************************

<IF DEFINED_ENABLE_AUTHENTICATION>
using Microsoft.AspNetCore.Authorization;
</IF DEFINED_ENABLE_AUTHENTICATION>
<IF DEFINED_ENABLE_API_VERSIONING>
using Microsoft.AspNetCore.Http;
using Microsoft.OData;
</IF DEFINED_ENABLE_API_VERSIONING>
using Microsoft.AspNetCore.JsonPatch;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNet.OData;
using Microsoft.AspNet.OData.Routing;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.Extensions.Options;
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using Harmony.Core.EF.Extensions;
using Harmony.Core.Interface;
using Harmony.OData;
using Harmony.AspNetCore;
using Newtonsoft.Json;
using <MODELS_NAMESPACE>;

namespace <NAMESPACE>
{
<IF DEFINED_ENABLE_AUTHENTICATION>
    [Authorize]
</IF DEFINED_ENABLE_AUTHENTICATION>
<IF DEFINED_ENABLE_API_VERSIONING>
    [ApiVersion("<API_VERSION>")]
</IF DEFINED_ENABLE_API_VERSIONING>
    [ODataRoutePrefix("<StructurePlural>")]
    /// <summary>
    /// OData controller for <StructurePlural>
    /// </summary>
    public partial class <StructurePlural>Controller : ODataController
    {
        // Services provided via dependency injection
        private <MODELS_NAMESPACE>.DbContext _DbContext;
        private IServiceProvider _ServiceProvider;
        private IOptions<AppSettings> _AppSettings;

        /// <summary>
        /// Constructs a new instance of <StructurePlural>Controller
        /// </summary>
        /// <param name="aDbContext"> Database context instance(DI)</param>
        /// <param name="aServiceProvider"> Service provider instance(DI)</param>
        /// <param name="aAppSettings"> Application settings</param>
        public <StructurePlural>Controller(
            <MODELS_NAMESPACE>.DbContext aDbContext,
            IServiceProvider aServiceProvider,
            IOptions<AppSettings> aAppSettings)            
        {
            this._DbContext = aDbContext;
            this._ServiceProvider = aServiceProvider;
            this._AppSettings = aAppSettings;
        }

;//
;// GET ALL -------------------------------------------------------------------
;//
<IF DEFINED_ENABLE_GET_ALL AND GET_ALL_ENDPOINT>
        [ODataRoute]
  <IF DEFINED_ENABLE_API_VERSIONING>
        [Produces("application/json")]
        [ProducesResponseType(typeof(ODataValue<IEnumerable<<StructureNoplural>>>),StatusCodes.Status200OK)]
  </IF DEFINED_ENABLE_API_VERSIONING>
  <IF DEFINED_ENABLE_AUTHENTICATION AND USERTOKEN_ROLES_GET>
        [Authorize(Roles="<ROLES_GET>")]
  </IF DEFINED_ENABLE_AUTHENTICATION_AND_USERTOKEN_ROLES_GET>
  <IF DEFINED_ENABLE_FIELD_SECURITY>
        [HarmonyFieldSecurity<API_ENABLE_QUERY_PARAMS>]
  <ELSE>
        [EnableQuery<API_ENABLE_QUERY_PARAMS>]
  </IF DEFINED_ENABLE_FIELD_SECURITY>
        /// <summary>
        /// Get all <StructurePlural>
        /// </summary>
        /// <returns>Returns an IActionResult indicating the status of the operation and containing any data that was returned.</returns>
        public IActionResult Get<StructurePlural>()
        {
            return Ok(_DbContext.<StructurePlural>.AsNoTracking());
        }

</IF DEFINED_ENABLE_GET_ALL_AND_GET_ALL_ENDPOINT>
;//
;// GET ONE (PRIMARY KEY READ) ------------------------------------------------
;//
<IF STRUCTURE_ISAM AND DEFINED_ENABLE_GET_ONE AND GET_ENDPOINT>
        [ODataRoute("(<IF STRUCTURE_ISAM><PRIMARY_KEY><SEGMENT_LOOP><IF SEG_TAG_EQUAL><ELSE><FieldSqlName>={a<FieldSqlName>}<,></IF SEG_TAG_EQUAL></SEGMENT_LOOP></PRIMARY_KEY></IF STRUCTURE_ISAM><IF STRUCTURE_RELATIVE>aRecordNumber</IF STRUCTURE_RELATIVE>)")]
  <IF DEFINED_ENABLE_API_VERSIONING>
        [Produces("application/json")]
        [ProducesResponseType(typeof(<StructureNoplural>),StatusCodes.Status200OK)]
        [ProducesResponseType(StatusCodes.Status404NotFound)]
  </IF DEFINED_ENABLE_API_VERSIONING>
  <IF DEFINED_ENABLE_AUTHENTICATION>
    <IF USERTOKEN_ROLES_GET>
        [Authorize(Roles="<ROLES_GET>")]
    </IF USERTOKEN_ROLES_GET>
  </IF DEFINED_ENABLE_AUTHENTICATION>
  <IF DEFINED_ENABLE_FIELD_SECURITY>
        [HarmonyFieldSecurity<API_ENABLE_QUERY_PARAMS>]
  <ELSE>
        [EnableQuery<API_ENABLE_QUERY_PARAMS>]
  </IF DEFINED_ENABLE_FIELD_SECURITY>
        /// <summary>
        /// Get a single <StructureNoplural> by primary key.
        /// </summary>
  <IF STRUCTURE_ISAM>
    <PRIMARY_KEY>
      <SEGMENT_LOOP>
        <IF NOT SEG_TAG_EQUAL>
        /// <param name="a<FieldSqlName>"><FIELD_DESC></param>
        </IF>
      </SEGMENT_LOOP>
        /// <returns>Returns a SingleResult indicating the status of the operation and containing any data that was returned.</returns>
        public SingleResult<<StructureNoplural>> Get<StructureNoplural>(<SEGMENT_LOOP><IF NOT SEG_TAG_EQUAL>[FromODataUri]<IF CUSTOM_HARMONY_AS_STRING>string a<FieldSqlName><ELSE><HARMONYCORE_SEGMENT_DATATYPE> a<FieldSqlName></IF CUSTOM_HARMONY_AS_STRING></IF><,></SEGMENT_LOOP>)
    </PRIMARY_KEY>
  </IF STRUCTURE_ISAM>
  <IF STRUCTURE_RELATIVE>
        /// <param name="aRecordNumber">Record number</param>
        /// <returns>Returns a SingleResult indicating the status of the operation and containing any data that was returned.</returns>
        public SingleResult<<StructureNoplural>> Get<StructureNoplural>([FromODataUri] int aRecordNumber)
  </IF STRUCTURE_RELATIVE>
        {
            return new SingleResult<<StructureNoplural>>(_DbContext.<StructurePlural>.AsNoTracking().FindQuery(_DbContext, <IF STRUCTURE_ISAM><PRIMARY_KEY><SEGMENT_LOOP><IF SEG_TAG_EQUAL><SEGMENT_TAG_VALUE><ELSE>a<FieldSqlName><IF HARMONYCORE_CUSTOM_SEGMENT_DATATYPE><ELSE><IF ALPHA>.PadRight(<FIELD_SIZE>)</IF ALPHA></IF HARMONYCORE_CUSTOM_SEGMENT_DATATYPE></IF SEG_TAG_EQUAL><,></SEGMENT_LOOP></PRIMARY_KEY></IF STRUCTURE_ISAM><IF STRUCTURE_RELATIVE>aRecordNumber</IF STRUCTURE_RELATIVE>));
        }

</IF STRUCTURE_ISAM>
;//
;// GET "ONE" (not in this case!) (ISAM, NON-UNIQUE PRIMARY KEY READ) ---------
;//
<IF STRUCTURE_ISAM AND NOT STRUCTURE_HAS_UNIQUE_PK AND DEFINED_ENABLE_GET_ONE AND GET_ENDPOINT>
        [ODataRoute("(<PRIMARY_KEY><SEGMENT_LOOP><IF SEG_TAG_EQUAL><ELSE><FieldSqlName>={a<FieldSqlName>}<,></IF SEG_TAG_EQUAL></SEGMENT_LOOP></PRIMARY_KEY>)")]
        [Produces("application/json")]
        [ProducesResponseType(typeof(ODataValue<IEnumerable<<StructureNoplural>>>),StatusCodes.Status200OK)]
  <IF DEFINED_ENABLE_AUTHENTICATION AND USERTOKEN_ROLES_GET>
        [Authorize(Roles="<ROLES_GET>")]
  </IF DEFINED_ENABLE_AUTHENTICATION>
  <IF DEFINED_ENABLE_FIELD_SECURITY>
        [HarmonyFieldSecurity<API_ENABLE_QUERY_PARAMS>]
  <ELSE>
        [EnableQuery<API_ENABLE_QUERY_PARAMS>]
  </IF DEFINED_ENABLE_FIELD_SECURITY>
        /// <summary>
        /// Get all <StructurePlural> matching non-unique primary key.
        /// </summary>
  <PRIMARY_KEY>
    <SEGMENT_LOOP>
      <IF NOT SEG_TAG_EQUAL>
        /// <param name="a<FieldSqlName>"><FIELD_DESC></param>
      </IF>
    </SEGMENT_LOOP>
  </PRIMARY_KEY>
        /// <returns>Returns a collection of any <StructurePlural> matching non-unique primary key, or an empty collection if no matching records are found.</returns>
        public IActionResult Get<StructureNoplural>(<PRIMARY_KEY><SEGMENT_LOOP><IF NOT SEG_TAG_EQUAL>[FromODataUri]<IF CUSTOM_HARMONY_AS_STRING>string a<FieldSqlName><ELSE><HARMONYCORE_SEGMENT_DATATYPE> a<FieldSqlName></IF CUSTOM_HARMONY_AS_STRING></IF><,></SEGMENT_LOOP></PRIMARY_KEY>)
        {
            return Ok(_DbContext.<StructurePlural>.AsNoTracking().FindQuery(_DbContext, <PRIMARY_KEY><SEGMENT_LOOP><IF SEG_TAG_EQUAL><SEGMENT_TAG_VALUE><ELSE>a<FieldSqlName><IF HARMONYCORE_CUSTOM_SEGMENT_DATATYPE><ELSE><IF ALPHA>.PadRight(<FIELD_SIZE>)</IF ALPHA></IF HARMONYCORE_CUSTOM_SEGMENT_DATATYPE></IF SEG_TAG_EQUAL><,></SEGMENT_LOOP></PRIMARY_KEY>));
        }

</IF STRUCTURE_ISAM>
;//
;// GET ONE (RELATIVE FILE RECORD NUMBER READ) --------------------------------
;//
<IF STRUCTURE_RELATIVE AND DEFINED_ENABLE_GET_ONE AND GET_ENDPOINT>
        [ODataRoute("(aRecordNumber)")]
        [Produces("application/json")]
        [ProducesResponseType(typeof(<StructureNoplural>),StatusCodes.Status200OK)]
        [ProducesResponseType(StatusCodes.Status404NotFound)]
  <IF DEFINED_ENABLE_AUTHENTICATION AND USERTOKEN_ROLES_GET>
        [Authorize(Roles="<ROLES_GET>")]
  </IF DEFINED_ENABLE_AUTHENTICATION>
  <IF DEFINED_ENABLE_FIELD_SECURITY>
        [HarmonyFieldSecurity<API_ENABLE_QUERY_PARAMS>]
  <ELSE>
        [EnableQuery<API_ENABLE_QUERY_PARAMS>]
  </IF DEFINED_ENABLE_FIELD_SECURITY>
        /// <summary>
        /// Get a single <StructureNoplural> by relative record number.
        /// </summary>
        /// <param name="aRecordNumber">Record number</param>
        /// <returns>Returns a SingleResult indicating the status of the operation and containing any data that was returned.</returns>
        public SingleResult<<StructureNoplural>> Get<StructureNoplural>([FromODataUri] int aRecordNumber)
        {
            return new SingleResult<<StructureNoplural>>(_DbContext.<StructurePlural>.AsNoTracking().FindQuery(_DbContext, aRecordNumber));
        }

</IF STRUCTURE_RELATIVE>
;//
;// GET BY ALTERNATE KEY ------------------------------------------------------
;//
<IF STRUCTURE_ISAM AND DEFINED_ENABLE_ALTERNATE_KEYS AND ALTERNATE_KEY_ENDPOINTS> 
  <ALTERNATE_KEY_LOOP_UNIQUE>    
        /// <summary>
        /// Get <structurePlural> by alternate key key <KeyName>.
        /// </summary>
      <SEGMENT_LOOP>
        <IF NOT SEG_TAG_EQUAL>
        /// <param name="a<FieldSqlName>"><FIELD_DESC></param>
        </IF>
      </SEGMENT_LOOP>
        /// <returns>Returns an IActionResult indicating the status of the operation and containing any data that was returned.</returns>
      <IF DUPLICATES>
        [ODataRoute("(<SEGMENT_LOOP><IF SEG_TAG_EQUAL><ELSE><FieldSqlName>={a<FieldSqlName>}<,></IF SEG_TAG_EQUAL></SEGMENT_LOOP>)")]
        [Produces("application/json")]
        [ProducesResponseType(typeof(ODataValue<IEnumerable<<StructureNoplural>>>),StatusCodes.Status200OK)]
        [ProducesResponseType(StatusCodes.Status404NotFound)]
      <IF DEFINED_ENABLE_AUTHENTICATION AND USERTOKEN_ROLES_GET>
        [Authorize(Roles="<ROLES_GET>")]
      </IF DEFINED_ENABLE_AUTHENTICATION>
      <IF DEFINED_ENABLE_FIELD_SECURITY>
        [HarmonyFieldSecurity<API_ENABLE_QUERY_PARAMS>]
      <ELSE>
        [EnableQuery<API_ENABLE_QUERY_PARAMS>]
      </IF DEFINED_ENABLE_FIELD_SECURITY>
        public IActionResult Get<StructurePlural>By<KeyName>(<SEGMENT_LOOP><IF NOT SEG_TAG_EQUAL>[FromODataUri]<IF CUSTOM_HARMONY_AS_STRING>string a<FieldSqlName><ELSE><HARMONYCORE_SEGMENT_DATATYPE> a<FieldSqlName></IF CUSTOM_HARMONY_AS_STRING></IF><,></SEGMENT_LOOP>)
        {
            var result = _DbContext.<StructurePlural>.AsNoTracking().FindAlternate(<SEGMENT_LOOP>"<FieldSqlName>",<IF SEG_TAG_EQUAL><SEGMENT_TAG_VALUE><ELSE>a<FieldSqlName></IF SEG_TAG_EQUAL><,></SEGMENT_LOOP>);
            if (result == null)
                return NotFound();
            return Ok(result);
        }
    <ELSE>        
        /// <summary>
        /// Get <structureNoplural> by alternate key <KeyName>.
        /// </summary>
      <SEGMENT_LOOP>
        <IF NOT SEG_TAG_EQUAL>
        /// <param name="a<FieldSqlName>"><FIELD_DESC></param>
        </IF>
      </SEGMENT_LOOP>
        /// <returns>Returns a SingleResult indicating the status of the operation and containing any data that was returned.</returns>
        [ODataRoute("(<SEGMENT_LOOP><IF SEG_TAG_EQUAL><ELSE><FieldSqlName>={a<FieldSqlName>}<,></IF SEG_TAG_EQUAL></SEGMENT_LOOP>)")]
        [Produces("application/json")]
        [ProducesResponseType(^typeof(<StructureNoplural>),StatusCodes.Status200OK)]
        [ProducesResponseType(StatusCodes.Status404NotFound)]
      <IF DEFINED_ENABLE_AUTHENTICATION AND USERTOKEN_ROLES_GET>
        [Authorize(Roles="<ROLES_GET>")]
      </IF DEFINED_ENABLE_AUTHENTICATION>
      <IF DEFINED_ENABLE_FIELD_SECURITY>
        [HarmonyFieldSecurity<API_ENABLE_QUERY_PARAMS>]
      <ELSE>
        [EnableQuery<API_ENABLE_QUERY_PARAMS>]
      </IF DEFINED_ENABLE_FIELD_SECURITY>
        public SingleResult<<StructureNoplural>> Get<StructureNoplural>By<KeyName>(<SEGMENT_LOOP><IF NOT SEG_TAG_EQUAL>[FromODataUri]<IF CUSTOM_HARMONY_AS_STRING>string a<FieldSqlName><ELSE><HARMONYCORE_SEGMENT_DATATYPE> a<FieldSqlName></IF CUSTOM_HARMONY_AS_STRING></IF><,></SEGMENT_LOOP>)
        {
            return new SingleResult<<StructureNoplural>>(_DbContext.<StructurePlural>.AsNoTracking().FindAlternate(<SEGMENT_LOOP>"<FieldSqlName>",<IF SEG_TAG_EQUAL><SEGMENT_TAG_VALUE><ELSE>a<FieldSqlName><IF HARMONYCORE_CUSTOM_SEGMENT_DATATYPE><ELSE><IF ALPHA>.PadRight(<FIELD_SIZE>)</IF ALPHA></IF HARMONYCORE_CUSTOM_SEGMENT_DATATYPE></IF SEG_TAG_EQUAL><,></SEGMENT_LOOP>));
        }
    </IF DUPLICATES>

  </ALTERNATE_KEY_LOOP_UNIQUE>
</IF STRUCTURE_ISAM>
;//
;// POST ----------------------------------------------------------------------
;//
<IF STRUCTURE_ISAM AND DEFINED_ENABLE_POST AND POST_ENDPOINT>
  <IF DEFINED_ENABLE_AUTHENTICATION>
        /// <summary>
        /// Create a new <structureNoplural> (automatically assigned primary key).
        /// </summary>
        /// <returns>Returns an IActionResult indicating the status of the operation and containing any data that was returned.</returns>
    <IF USERTOKEN_ROLES_POST>
        [Authorize(Roles="<ROLES_POST>")]
    </IF USERTOKEN_ROLES_POST>
  </IF DEFINED_ENABLE_AUTHENTICATION>
        [ODataRoute]
        [Produces("application/json")]
        [ProducesResponseType(typeof(<StructureNoplural>),StatusCodes.Status200OK)]
        [ProducesResponseType(StatusCodes.Status400BadRequest)]
        [HttpPost]        
        public IActionResult Post<StructureNoplural>([FromBody]<StructureNoplural> a<StructureNoplural>)
        {
            //Remove the primary key fields from ModelState
;//
;// ISAM
;//
    <PRIMARY_KEY>
      <SEGMENT_LOOP>
            ModelState.Remove("<FieldSqlName>");
      </SEGMENT_LOOP>
    </PRIMARY_KEY>

            // Validate inbound data
            if (!ModelState.IsValid)
                return ValidationHelper.ReturnValidationError(ModelState);

            // Get the next available primary key value
            using var keyFactory = (IPrimaryKeyFactory)_ServiceProvider.GetService(typeof(IPrimaryKeyFactory));
            keyFactory.AssignPrimaryKey(a<StructureNoplural>);

            // Add the new <structureNoplural>
            try
            {
                _DbContext.<StructurePlural>.Add(a<StructureNoplural>);
                _DbContext.SaveChanges(keyFactory);
            }
            catch (ValidationException e)
            {
                ModelState.AddModelError("RelationValidation", e.Message);
                return ValidationHelper.ReturnValidationError(ModelState);
            }            

            return Created(a<StructureNoplural>);
        }

</IF STRUCTURE_ISAM>
;//
;// PUT -----------------------------------------------------------------------
;//
<IF STRUCTURE_ISAM AND DEFINED_ENABLE_PUT AND PUT_ENDPOINT>
  <KEY_LOOP>
    <IF FIRST_UNIQUE_KEY OR (NODUPLICATES AND DEFINED_ENABLE_ALT_PUT)>      
        /// <summary>
        /// Create (with a client-supplied primary key) or replace a <structureNoplural>.
        /// </summary>
      <SEGMENT_LOOP>
        <IF NOT SEG_TAG_EQUAL>
        /// <param name="a<FieldSqlName>"><FIELD_DESC></param>
        </IF>
      </SEGMENT_LOOP>
        /// <returns>Returns an IActionResult indicating the status of the operation and containing any data that was returned.</returns>
      <IF DEFINED_ENABLE_AUTHENTICATION AND USERTOKEN_ROLES_PUT>
        [Authorize(Roles="<ROLES_PUT>")]
      </IF DEFINED_ENABLE_AUTHENTICATION>
        [ODataRoute("(<SEGMENT_LOOP><IF SEG_TAG_EQUAL><ELSE><FieldSqlName>={a<FieldSqlName>}<,></IF SEG_TAG_EQUAL></SEGMENT_LOOP>)")]
        [Produces("application/json")]
        [ProducesResponseType(StatusCodes.Status201Created)]
        [ProducesResponseType(StatusCodes.Status400BadRequest)]
        [ProducesResponseType(StatusCodes.Status404NotFound)]
        [HttpPut]
        public IActionResult Put<StructureNoplural><IF NOT FIRST_UNIQUE_KEY>By<KeyName></IF>(<SEGMENT_LOOP><IF NOT SEG_TAG_EQUAL>[FromODataUri]<IF CUSTOM_HARMONY_AS_STRING>string a<FieldSqlName><ELSE><HARMONYCORE_SEGMENT_DATATYPE> a<FieldSqlName></IF CUSTOM_HARMONY_AS_STRING></IF><,></SEGMENT_LOOP>, [FromBody]<StructureNoplural> a<StructureNoplural>)      
        {
            // Validate inbound data
            if (!ModelState.IsValid)
                return ValidationHelper.ReturnValidationError(ModelState);

            // Ensure that the key values in the URI win over any data that may be in the model object
      <SEGMENT_LOOP>
        <IF SEG_TAG_EQUAL>
            a<StructureNoplural>.<FieldSqlname> = <SEGMENT_TAG_VALUE>;
        <ELSE>
            a<StructureNoplural>.<FieldSqlname> = a<FieldSqlName>;
        </IF SEG_TAG_EQUAL>
      </SEGMENT_LOOP>

            try
            {
                // Add and commit
                var existing = _DbContext.<StructurePlural>.Find(<SEGMENT_LOOP><IF SEG_TAG_EQUAL><SEGMENT_TAG_VALUE><ELSE>a<FieldSqlName><IF HARMONYCORE_CUSTOM_SEGMENT_DATATYPE><ELSE><IF ALPHA>.PadRight(<FIELD_SIZE>)</IF ALPHA></IF HARMONYCORE_CUSTOM_SEGMENT_DATATYPE></IF SEG_TAG_EQUAL><,></SEGMENT_LOOP>);
                if (existing == null)
                {
                    _DbContext.<StructurePlural>.Add(a<StructureNoplural>);
                    _DbContext.SaveChanges();
                    return Created(a<StructureNoplural>);
                }
                a<StructureNoplural>.CopyTo(existing);
                _DbContext.SaveChanges();
                return NoContent();
            }
            catch (InvalidOperationException e)
            {
                return BadRequest(e);
            }
            catch (ValidationException e)
            {
                ModelState.AddModelError("RelationValidation", e.Message);
                return ValidationHelper.ReturnValidationError(ModelState);
            }

        }
    </IF FIRST_UNIQUE_KEY>
  </KEY_LOOP>
</IF STRUCTURE_ISAM>
;//
;// PATCH ---------------------------------------------------------------------
;//
<IF STRUCTURE_ISAM AND DEFINED_ENABLE_PATCH AND PATCH_ENDPOINT>
  <KEY_LOOP>
    <IF FIRST_UNIQUE_KEY OR (NODUPLICATES AND DEFINED_ENABLE_ALT_PATCH)>    
        /// <summary>
        /// Patch  (partial update) a <structureNoplural>.
        /// </summary>
        <SEGMENT_LOOP>
          <IF NOT SEG_TAG_EQUAL>
        /// <param name="a<FieldSqlName>"><FIELD_DESC></param>
          </IF>
        </SEGMENT_LOOP>
        /// <returns>Returns an IActionResult indicating the status of the operation and containing any data that was returned.</returns>
      <IF DEFINED_ENABLE_AUTHENTICATION AND USERTOKEN_ROLES_PATCH>
        [Authorize(Roles="<ROLES_PATCH>")]
      </IF DEFINED_ENABLE_AUTHENTICATION>
        [ODataRoute("(<SEGMENT_LOOP><IF SEG_TAG_EQUAL><ELSE><FieldSqlName>={a<FieldSqlName>}<,></IF SEG_TAG_EQUAL></SEGMENT_LOOP>)")]
        [Produces("application/json")]
        [ProducesResponseType(StatusCodes.Status204NoContent)]
        [ProducesResponseType(StatusCodes.Status400BadRequest)]
        [ProducesResponseType(StatusCodes.Status404NotFound)]
        [HttpPatch]
        public IActionResult Patch<StructureNoplural><IF NOT FIRST_UNIQUE_KEY>By<KeyName></IF>(<SEGMENT_LOOP><IF NOT SEG_TAG_EQUAL>[FromODataUri]<IF CUSTOM_HARMONY_AS_STRING>string a<FieldSqlName><ELSE><HARMONYCORE_SEGMENT_DATATYPE> a<FieldSqlName></IF CUSTOM_HARMONY_AS_STRING></IF><,></SEGMENT_LOOP>, [FromBody]JsonPatchDocument<<StructureNoplural>> a<StructureNoplural>)        
        {
            // Validate inbound data
            if (!ModelState.IsValid)
                return ValidationHelper.ReturnValidationError(ModelState);

            // Patch the existing <structureNoplural>
            try
            {
                // Get the <structureNoplural> to be updated
                var <structureNoplural>ToUpdate = _DbContext.<StructurePlural>.Find(<SEGMENT_LOOP><IF SEG_TAG_EQUAL><SEGMENT_TAG_VALUE><ELSE>a<FieldSqlName><IF HARMONYCORE_CUSTOM_SEGMENT_DATATYPE><ELSE><IF ALPHA>.PadRight(<FIELD_SIZE>)</IF ALPHA></IF HARMONYCORE_CUSTOM_SEGMENT_DATATYPE></IF SEG_TAG_EQUAL><,></SEGMENT_LOOP>);
                
                // Did we find it?
                if(<structureNoplural>ToUpdate == null)
                    return NotFound();

                JsonPatchError patchError = null;
                // Apply the changes to the <structureNoplural> we read
                a<StructureNoplural>.ApplyTo(<structureNoplural>ToUpdate, error => patchError = error);
                // if the patchdoc was bad return the error info
                if (patchError != null)
                    return BadRequest(string.Format("Error applying patch document: error message {0}, caused by {1}", patchError.ErrorMessage, JsonConvert.SerializeObject(patchError.Operation)));

                //Update and commit
                _DbContext.<StructurePlural>.Update(<structureNoplural>ToUpdate);
                _DbContext.SaveChanges();
            }
            catch (InvalidOperationException e)
            {
                return BadRequest(e);
            }
            catch (ValidationException e)
            {
                ModelState.AddModelError("RelationValidation", e.Message);
                return ValidationHelper.ReturnValidationError(ModelState);
            }

            return NoContent();
        }
    </IF FIRST_UNIQUE_KEY>
  </KEY_LOOP>
</IF STRUCTURE_ISAM>
;//
;// DELETE --------------------------------------------------------------------
;//
<IF STRUCTURE_ISAM AND DEFINED_ENABLE_DELETE AND DELETE_ENDPOINT>
   <KEY_LOOP>
    <IF FIRST_UNIQUE_KEY OR (NODUPLICATES AND DEFINED_ENABLE_ALT_DELETE)>
        /// <summary>
        /// Delete a <structureNoplural>.
        /// </summary>
        <SEGMENT_LOOP>
          <IF NOT SEG_TAG_EQUAL>
        /// <param name="a<FieldSqlName>"><FIELD_DESC></param>
          </IF>
        </SEGMENT_LOOP>
        /// <returns>Returns an IActionResult indicating the status of the operation and containing any data that was returned.</returns>
      <IF DEFINED_ENABLE_AUTHENTICATION AND USERTOKEN_ROLES_DELETE>
        [Authorize(Roles="<ROLES_DELETE>")]
      </IF DEFINED_ENABLE_AUTHENTICATION>
        [ODataRoute("(<SEGMENT_LOOP><IF SEG_TAG_EQUAL><ELSE><FieldSqlName>={a<FieldSqlName>}<,></IF SEG_TAG_EQUAL></SEGMENT_LOOP>)")]
        [ProducesResponseType(StatusCodes.Status204NoContent)]
        [ProducesResponseType(StatusCodes.Status404NotFound)]
        [HttpDelete]
        public IActionResult Delete<StructureNoplural><IF NOT FIRST_UNIQUE_KEY>By<KeyName></IF>(<SEGMENT_LOOP><IF NOT SEG_TAG_EQUAL>[FromODataUri]<IF CUSTOM_HARMONY_AS_STRING>string a<FieldSqlName><ELSE><HARMONYCORE_SEGMENT_DATATYPE> a<FieldSqlName></IF CUSTOM_HARMONY_AS_STRING></IF><,></SEGMENT_LOOP>)        
        {
            //Get the <structureNoplural> to be deleted
            var <structureNoplural>ToRemove = _DbContext.<StructurePlural>.Find(<SEGMENT_LOOP><IF SEG_TAG_EQUAL><SEGMENT_TAG_VALUE><ELSE>a<FieldSqlName><IF HARMONYCORE_CUSTOM_SEGMENT_DATATYPE><ELSE><IF ALPHA>.PadRight(<FIELD_SIZE>)</IF ALPHA></IF HARMONYCORE_CUSTOM_SEGMENT_DATATYPE></IF SEG_TAG_EQUAL><,></SEGMENT_LOOP>);

            //Did we find it?
            if (<structureNoplural>ToRemove == null)
                return NotFound();

            //Delete and commit
            _DbContext.<StructurePlural>.Remove(<structureNoplural>ToRemove);
            _DbContext.SaveChanges();

            return NoContent();
        }
    </IF FIRST_UNIQUE_KEY>
  </KEY_LOOP>
</IF STRUCTURE_ISAM>
    }
}